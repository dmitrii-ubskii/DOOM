// Map level types.
// The following data structures define the persistent format
// used in the lumps of the WAD files.

#![allow(non_snake_case, non_camel_case_types, clippy::missing_safety_doc)]

use std::ffi::c_char;

// Lump order in a map WAD: each map needs a couple of lumps
// to provide a complete scene geometry description.
pub const ML_LABEL: usize = 0; // A separator, name, ExMx or MAPxx
pub const ML_THINGS: usize = 1; // Monsters, items..
pub const ML_LINEDEFS: usize = 2; // LineDefs, from editing
pub const ML_SIDEDEFS: usize = 3; // SideDefs, from editing
pub const ML_VERTEXES: usize = 4; // Vertices, edited and BSP splits generated
pub const ML_SEGS: usize = 5; // LineSegs, from LineDefs split by BSP
pub const ML_SSECTORS: usize = 6; // SubSectors, list of LineSegs
pub const ML_NODES: usize = 7; // BSP nodes
pub const ML_SECTORS: usize = 8; // Sectors, from editing
pub const ML_REJECT: usize = 9; // LUT, sector-sector visibility	
pub const ML_BLOCKMAP: usize = 10; // LUT, motion clipping, walls/grid element

// A single Vertex.
#[repr(C)]
pub struct mapvertex_t {
	x: i16,
	y: i16,
}

// A SideDef, defining the visual appearance of a wall,
// by setting textures and offsets.
#[repr(C)]
pub struct mapsidedef_t {
	textureoffset: i16,
	rowoffset: i16,
	toptexture: [c_char; 8],
	bottomtexture: [c_char; 8],
	midtexture: [c_char; 8],
	// Front sector, towards viewer.
	sector: i16,
}

// A LineDef, as used for editing, and as input
// to the BSP builder.
#[repr(C)]
pub struct maplinedef_t {
	v1: i16,
	v2: i16,
	flags: i16,
	special: i16,
	tag: i16,
	// sidenum[1] will be -1 if one sided
	sidenum: [i16; 2],
}

// LineDef attributes.

// Solid, is an obstacle.
pub const ML_BLOCKING: u8 = 1;

// Blocks monsters only.
pub const ML_BLOCKMONSTERS: u8 = 2;

// Backside will not be present at all
//  if not two sided.
pub const ML_TWOSIDED: i16 = 4;

// If a texture is pegged, the texture will have
// the end exposed to air held constant at the
// top or bottom of the texture (stairs or pulled
// down things) and will move with a height change
// of one of the neighbor sectors.
// Unpegged textures allways have the first row of
// the texture at the top pixel of the line for both
// top and bottom textures (use next to windows).

// upper texture unpegged
pub const ML_DONTPEGTOP: usize = 8;

// lower texture unpegged
pub const ML_DONTPEGBOTTOM: usize = 16;

// In AutoMap: don't map as two sided: IT'S A SECRET!
pub const ML_SECRET: usize = 32;

// Sound rendering: don't let sound cross two of these.
pub const ML_SOUNDBLOCK: usize = 64;

// Don't draw on the automap at all.
pub const ML_DONTDRAW: usize = 128;

// Set if already seen, thus drawn in automap.
pub const ML_MAPPED: usize = 256;

// Sector definition, from editing.
#[repr(C)]
pub struct mapsector_t {
	floorheight: i16,
	ceilingheight: i16,
	floorpic: [c_char; 8],
	ceilingpic: [c_char; 8],
	lightlevel: i16,
	special: i16,
	tag: i16,
}

// SubSector, as generated by BSP.
#[repr(C)]
pub struct mapsubsector_t {
	numsegs: i16,
	// Index of first one, segs are stored sequentially.
	firstseg: i16,
}

// LineSeg, generated by splitting LineDefs
// using partition lines selected by BSP builder.
#[repr(C)]
pub struct mapseg_t {
	v1: i16,
	v2: i16,
	angle: i16,
	linedef: i16,
	side: i16,
	offset: i16,
}

// BSP node structure.

// Indicate a leaf.
pub const NF_SUBSECTOR: usize = 0x8000;

#[repr(C)]
pub struct mapnode_t {
	// Partition line from (x,y) to x+dx,y+dy)
	x: i16,
	y: i16,
	dx: i16,
	dy: i16,

	// Bounding box for each child,
	// clip against view frustum.
	bbox: [[i16; 4]; 2],

	// If NF_SUBSECTOR its a subsector,
	// else it's a node of another subtree.
	children: [u16; 2],
}

// Thing definition, position, orientation and type,
// plus skill/visibility flags and attributes.
#[repr(C)]
#[derive(Clone, Copy)]
pub struct mapthing_t {
	pub x: i16,
	pub y: i16,
	pub angle: i16,
	pub ty: i16,
	pub options: i16,
}
